let ConnStateLookup = datatable(
    conn_state: string,
    conn_state_desc: string,
    action: string
)[
    "S0","Connection attempt seen, no reply.","teardown",
    "S1","Connection established, not terminated.","allowed",
    "SF","Normal establishment and termination.","allowed",
    "REJ","Connection attempt rejected.","blocked",
    "S2","Connection established and close attempt by originator seen (but no reply from responder).","allowed",
    "S3","Connection established and close attempt by responder seen (but no reply from originator).","allowed",
    "RSTO","Connection established, originator aborted (sent a RST).","allowed",
    "RSTR","Established, responder aborted.","allowed",
    "RSTOS0","Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder.","teardown",
    "RSTRH","Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator.","teardown",
    "SH","Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open).","teardown",
    "SHR","Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator.","teardown",
    "OTH","No SYN seen, just midstream traffic (a 'partial connection' that was not later closed).","allowed"
];
let corelight_conn = view () {
    union isfuzzy=true
    Corelight_v2_conn_CL,
    Corelight_v2_conn_red_CL,
    Corelight_v2_conn_long_CL
    | invoke ASIM_NetworkSessionParser()
    | summarize arg_max(TimeGenerated, *) by session_id
    | extend 
        conn_state_desc = lookup(ConnStateLookup, conn_state),
        EventVendor = "Corelight",
        EventProduct = "CorelightSensor",
        EventType = "conn",
        src_ip = id_orig_h,
        dest_ip = id_resp_h,
        src_port = id_orig_p,
        dest_port = id_resp_p,
        bytes_out = orig_ip_bytes,
        bytes_in = resp_ip_bytes,
        packets_out = orig_pkts,
        packets_in = resp_pkts,
        transport = proto
    | project 
        TimeGenerated,
        session_id,
        src_ip,
        src_port,
        dest_ip,
        dest_port,
        transport,
        conn_state_desc,
        bytes_out,
        bytes_in,
        packets_out,
        packets_in,
        EventVendor,
        EventProduct,
        EventType
};
corelight_conn
